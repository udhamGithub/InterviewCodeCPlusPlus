#include<iostream>
using namespace std;
#if 0
======================================================================================================
-what is constant cast
-What is the difference Simple cast and Re_interpret cast as both does the same in c++,Which is better
-Simple cast check for all type casting,which mach it does,that means in case of overide,it will check dynamic cast
-cstyle cast v/s c++ cast
	reinterpret_cast,dynamic_cast,static cast,constant_cast
-Converesion,
		-Objct type
		-Refrence and pointer type
		-Similar data type()
		-built in data type-userdefiend data type
-Class conversion
	-public derivation or private derivation effect casting, static and dynamic casting?
=====================================================================================================
#endif
//--Simple class and inheritance no overriding-----------------------------------------
class Base
{	int a, b;
public:
	Base(){cout<<"Base daata"<<endl;}
	~Base()	{}
};
class Derived: public Base
{
	int x,y;
public:
	Derived(){cout<<"Base daata"<<endl;}
	~Derived(){ }
};
//-------------Class Having overiding------------------------
class Shape
{
	int z;
	virtual void draw()
	{
		cout<<"Draw::Shape"<<endl;
	}
public:
	Shape(){cout<<"shape"<<endl;}
};
class Circle
{
	int fs;
	void draw()	{cout<<"Draw::Shape"<<endl;	}
public:
	Circle(){cout<<"Circle"<<endl;}
};
//---Indepedent claass
class Man
{
public:
	Man(){cout<<"Man"<<endl;}
};
class Animal
{
public:
	Animal(){cout<<"Animal"<<endl;}
};
int main()
{
	//ReInterpret_const will not remove constant constness
	//We can serch where we are doing reinterpret_cast in our code serching easy
	const int a=10;
	//int *g=reinterpret_cast< int* >( &a );
	//Simple casting does,it will  look all casting ,which it match does that
	int *DatConversion=(int*)(&a);
    //----------------------------------------------


	cout<<"My main Program:"<<endl;
	unsigned char chardata=10; //1 Byte
//--Simple c style cast----
	//int *ptr=&data;     //compilation Error
	int *ptr=(int*)&chardata; //pointer is 4 byte integer
		//casting sucessfull but it is dangerous and it can cause segmentaion fault.
		//User has to aware what  he is  doing
	*ptr = 100;
	cout<< "data:---"<<chardata;
	//*ptr = 100;
//Static cast------------------------------------------------------------
	int intdata=20;
	//int *ptr2= static_cast<int*>&data;
			//error as not same type ,Save user to dangerous situation,
			//Now he need to be carefull about ,his conversion
	//So it  allow only type-safe conversion,take same type,so usefull in inhritance
	int *ptrSt= static_cast<int*>(&intdata);//Sucessfull

//Re_interpretCast---------------------------------------------------------
	int *ptRe= reinterpret_cast<int*>(&chardata);//no compilation Issue
	*ptRe=12;									 //Work Same As  normal c-casting,for diffretent type conversion
												 //So this is also same  as c-style and dangerous in C++,
	//-stil why we use-see the below  reason case
			//It requires case where we want conversion b/w  diffrent type in c++.
			//where static cast and dynamic cast will not help us.
			//Serch such type of convesrion real example in c++ ,where only re_interpret_cast work.
			//e.in c++ client register it class ,but server provide the interface as integer pointer arguement.
			//as he store this adress in integer array.
			//write the code for same
//Dynamic Cast---------------------------------------------------------
		//int *ptrD= dynamic_cast<int*>(&chardata); //compilation error because it will work only overide
//class conversion---------------------------------------------------------
		//Upcasting
		//Base *ptrB1=  new Derived;//error
		Base *ptrB2=  (Base*)new Derived ;//cstyle
		if(ptrB2==NULL)
		{	cout<<"conversion fail";}
		Base *ptrB3= static_cast<Base*>(new Derived) ;
		if(ptrB3==NULL)
		{	cout<<"conversion fail";}
		Base *ptrB4= dynamic_cast<Base*>(new Derived) ;
		if(ptrB4==NULL)
		{	cout<<"conversion fail";}
		//if privated derived ‘Base’ is an inaccessible base of ‘Derived’only in override case
		Base *ptrB5= reinterpret_cast<Base*>(new Derived);
		if(ptrB5==NULL)
		{	cout<<"conversion fail";}
		//down castingBase *ptrB=  new Derived
		//Derived *dptr= new Base;//error
		Derived *dptr0=(Derived*) new Base;//cstyle
		if(dptr0==NULL)
		{	cout<<"conversion fail dptr0=NULL";}
		Derived *dptr1=static_cast<Derived*>(new Base);//cstyle
		if(dptr1==NULL)
		{	cout<<"conversion fail dptr1=NULL";}
		//Derived *dptr2=dynamic_cast<Derived*>(new Base);//error source type is not polymorphic)
		Derived *dptr3=reinterpret_cast<Derived*>(new Base);//cstyle
		if(dptr3==NULL)
		{	cout<<"conversion fail dptr3=NULL";}
	//class conversion--override case-------------------------------------------------------
		//what is the diffrence we come to know here b/w static cast and dynamic cast
	//Independent class---------------------------------------------------------
	return 0;
}
#if 0
Explain Below in Deep
Implicit conversion-Built in data type.
					-automatic
					-for stoping auto matic conversion ,use explicit key word
Explict conversion-()
Conversion using constructor
conversion using function:
					-class object easily get converted to normal type
					-int a= obj;
#endif


#if 0
==========================================================================================
		Cstyle cast vs reinterpret_cast
==========================================================================================
The C-style cast isn't better.
It simply tries the various C++-style casts in order, until it finds one that works.
that means that when it acts like a reinterpret_cast, it has the exact same problems
as a reinterpret_cast.
****
But in addition, it has these problems:it can do many different things, and it's not
always clear from reading the code which type of cast will be invoked (it might behave
like a reinterpret_cast,a const_cast or a static_cast, and those do very different things).
****
similarly, changing the surrounding code might change the meaning of the cast, it's hard
to search for (reinterpret_cast is easy to find, which is good, because casts are ugly and
should be paid attention to when used. But a C-style cast, as in (int)42.0, is much harder
to find by searching)

reinterpret_cast is implementation-defined:----------------------------------------------
This means that when you use it to convert from, say, an int* to a float*, then you have no
guarantee that the resulting pointer will point to the same address. That part is
implementation-defined. But if you take the resulting float* and reinterpret_cast it back into
an int*, then you will get the original pointer. That part is guaranteed.

But again, remember that this is true whether you use reinterpret_cast or a C-style cast:

int i;
int* p0 = &i;

float* p1 = (float*)p0; // implementation-defined result
float* p2 = reinterpret_cast<float*>(p0); // implementation-defined result

int* p3 = (int*)p1; // guaranteed that p3 == p0
int* p4 = (int*)p2; // guaranteed that p4 == p0
int* p5 = reinterpret_cast<int*>(p1); // guaranteed that p5 == p0
int* p6 = reinterpret_cast<int*>(p2); // guaranteed that p6 == p0
=============================================================================================
Both reinterpret_cast and c-style casts are implementation defined and they do almost the same thing. The differences are :
1. reinterpret_cast can not remove constness. For example :

const unsigned int d = 5;
int *g=reinterpret_cast< int* >( &d );

will issue an error :

error: reinterpret_cast from type 'const unsigned int*' to type 'int*' casts away qualifiers

2. If you use reinterpret_cast, it is easy to find the places where you did it. It is not possible to do with c-style casts



#endif
