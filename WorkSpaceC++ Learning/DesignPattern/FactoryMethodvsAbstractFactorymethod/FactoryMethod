-Factory method is a creational design pattern, i.e., related to object creation. 
-In Factory pattern, we create object without exposing the creation logic to client and 
 the client use the same common interface(what?) to create new type of object.

-The idea is to use a static member-function (static factory method) which creates
 & returns instances, hiding the details of class modules from user.

A factory pattern is one of the core design principles to create an object,
allowing clients to create objects of a library(explained below) in a way such 
that it doesnâ€™t have tight coupling with the class hierarchy of the library.
===========================================================================================================
I can Map with Our Wiget library which class Name  get converted to new_class_name and newly class instance 
stored into factory,repository,and when ever this original class  object needed ,we pass original class name 
and achived it object on fly.
===========================================================================================================



What is meant when we talk about library and clients?
A library is something which is provided by some third party which exposes some public APIs and clients make calls to those public APIs to complete its task. A very simple example can be different kinds of Views provided by Android OS.

==========================

Why factory pattern?
Let us understand it with an example:
// A design without factory pattern
#include <iostream>
using namespace std;
 
// Library classes
class Vehicle {
public:
    virtual void printVehicle() = 0;
};
class TwoWheeler : public Vehicle {
public:
    void printVehicle()  {
        cout << "I am two wheeler" << endl;
    }
};
class FourWheeler : public Vehicle {
    public:
    void printVehicle()  {
        cout << "I am four wheeler" << endl;
    }
};
 
