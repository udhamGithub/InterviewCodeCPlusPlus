/*
 * SemaPhoreCreateMutex.cpp


 *
 *  Created on: 24-Nov-2017
 *      Author: udham
 */
#include<iostream>
#include<pthread.h>
#include<unistd.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

//int pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);
//pthread_mutex_init(&myMutex;0);
//pthread_mutex_lock(&myMutex;);
//pthread_mutex_unlock(&myMutex;)
//pthread_mutex_destroy(&myMutex;);

using namespace std;
void * Thread_DrawMillionPointOnDisplay(void*)
{
	while(1)
	{
		cout<<"Printer  use by Thread1\n";
		sleep(2);
	}
	pthread_exit(NULL);
}

void * Thread_BusinessLogic(void*)
{
	while(1)
	{
		cout<<"Printer  use by Thread1\n";
		sleep(2);
	}
	pthread_exit(NULL);
}
void * Thread_Keypad(void *)
{
	while(1)
	{
		cout<<"Printer  use by Thread2\n";
		sleep(2);
	}
	pthread_exit(NULL);
}

int main()
{
	pthread_t pid1;
	pthread_t pid2;
	pthread_create(&pid1,NULL,Thread_1,NULL);
	pthread_create(&pid2,NULL,Thread_2,NULL);
	pthread_join(pid1,NULL);
	pthread_join(pid2,NULL);
}




