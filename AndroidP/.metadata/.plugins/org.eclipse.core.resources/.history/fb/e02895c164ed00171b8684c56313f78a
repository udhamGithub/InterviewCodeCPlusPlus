/*
 * CloneImplementaion.cpp
 *
 *  Created on: 30-Dec-2017
 *      Author: udham
 */
#include<iostream>
#include <vector>
using namespace std;
class shape
{
public:
	//shape(){cout<<"shape:Base constructure"<<endl;}
	virtual void draw(void)
	{
		{cout<<"shape::draw"<<endl;}
	}
	~shape(){cout<<"Distructure";}
};
#if 0
void shape::draw()
{
  {cout<<"shape::draw"<<endl;}
}
#endif
class circle: public shape
{
public:
	//circle(){cout<<"circle constructure"<<endl;}
	virtual void draw(void)
	{cout<<"circle::draw"<<endl;}
};


class rectangle: public shape
{
public:
	//rectangle()
	//{cout<<"rectangle constructor"<<endl;}
	virtual void draw(void)
	{ 	cout<<"rectangle:: draw"<<endl; }
};
class square: public shape
{
	virtual void draw(void)
		{ 	cout<<"square:: draw"<<endl; }
};

// Factory is from  library==================================
enum shapetype
{
	CIRCLE,
	RECTANGLE,
	SQUARE,
};
vector<shape*> obj;

shape * getObjectFromFactory(shapetype ishapetype)
{
	shape *basePtr = NULL; //once goes out of scope basPter get deleted
	if(ishapetype ==  CIRCLE )
	{
		//basePtr= new circle;
		obj.push_back(new circle);
	}
	else if(ishapetype ==  RECTANGLE )
	{
		//basePtr = new rectangle;
		obj.push_back(new rectangle);
	}
	else if(ishapetype ==  SQUARE )
	{
		//basePtr = new square;
		obj.push_back(new square);
	}
	else
	{
		cout<<"Object is not in  Factory"<<endl;
	}
	return basePtr;
}

int main()
{
	//client code
	//draw circle
	shape *ptr1 = getObjectFromFactory(CIRCLE);
	//ptr1->draw();

	shape *ptr2 = getObjectFromFactory(RECTANGLE);
	//ptr2->draw();

	ptr2 = getObjectFromFactory(SQUARE);
	//ptr2->draw();
	for(int i=0;i<obj.size();i++)
	{
			obj[i]->draw();
	}
	for(int i=0;i<obj.size();i++)
	{
		delete obj[i];
	}
	return 0;
};







